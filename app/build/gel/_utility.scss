@each $color, $value in $colors {
  .bg-#{$color} {
    background-color: $value !important;
  }
}
@each $color, $value in $colors {
  .text-#{$color} {
    color: $value !important;
  }
}
// This variable affects the `.h-*` and `.w-*` classes.
$vsizes: ()!default;
$vsizes: map-merge((10: 10, 30: 30, 50: 50, 70: 70, 90: 90, 100: 100), $vsizes); // vw vh .vw-md-50
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
    @each $prop, $unit in (width: vw, height: vh) {
      @each $size, $length in $vsizes {
        .#{$unit}#{$infix}-#{$size} {
          #{$prop}: #{$size}#{$unit} !important;
        }
      }
    }
  }
}
@each $breakpoint in map-keys($grid-breakpoints) {  // mvh-70 max-height:70vh  mvw-30 max-width:30vw
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
    @each $prop, $unit in (max-width: vw, max-height: vh) {
      @each $size, $length in $vsizes {
        .max-#{$unit}#{$infix}-#{$size} {
          #{$prop}: #{$size}#{$unit} !important;
        }
      }
    }
  }
}

//  negative margin  mr-n-3  mr-sm-n-2
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    @each $prop, $abbrev in (margin: m) {
      @each $size, $length in $spacers {

        .#{$abbrev}#{$infix}-#{$size} { #{$prop}: $length !important; }
        .#{$abbrev}t#{$infix}-n-#{$size},
        .#{$abbrev}y#{$infix}-n-#{$size} {
          #{$prop}-top: -$length !important;
        }
        .#{$abbrev}r#{$infix}-n-#{$size},
        .#{$abbrev}x#{$infix}-n-#{$size} {
          #{$prop}-right: -$length !important;
        }
        .#{$abbrev}b#{$infix}-n-#{$size},
        .#{$abbrev}y#{$infix}-n-#{$size} {
          #{$prop}-bottom: -$length !important;
        }
        .#{$abbrev}l#{$infix}-n-#{$size},
        .#{$abbrev}x#{$infix}-n-#{$size} {
          #{$prop}-left: -$length !important;
        }
      }
    }
  }
}

.dragable {
  cursor: move;
}

.clickable{
  cursor: pointer;
}

.disabled {
  cursor: default;
  color: $disabled;
  pointer-events: none;
}

.absolute-center {
  margin: auto;
  position: absolute !important;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
}

.opacity-0 {
  opacity: 0;
}

.opacity-1 {
  opacity: 0.1;
}

.opacity-2 {
  opacity: 0.2;
}

.opacity-3 {
  opacity: 0.3;
}

.opacity-4 {
  opacity: 0.4;
}

.opacity-5 {
  opacity: 0.5;
}

.opacity-6 {
  opacity: 0.6;
}

.opacity-7 {
  opacity: 0.7;
}

.opacity-8 {
  opacity: 0.9;
}

.opacity-9 {
  opacity: 0.9;
}

.opacity-10 {
  opacity: 1;
}

.overflow-y-hide {
  overflow-y: hidden;
}

.overflow-y-auto {
  overflow-y: auto;
}

.overflow-y-scroll {
  overflow-y: scroll;
}

.overflow-y-visible {
  overflow-y: visible;
}

.overflow-x-hide {
  overflow-x: hidden;
}

.overflow-x-auto {
  overflow-x: auto;
}

.overflow-x-scroll {
  overflow-x: scroll;
}

.overflow-x-visible {
  overflow-x: visible;
}
