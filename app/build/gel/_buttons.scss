// Button variants
//
// Easily pump out default styles, as well as :hover, :focus, :active,
// and disabled options for all buttons
@mixin button-variant($background, $border, $hover-background: lighten($background, 9%), $hover-border: lighten($border, 9%), $active-background: darken($background, 9%), $active-border: darken($border, 9%)) {
  color: color-yiq($background);
  @include gradient-bg($background);
  border-color: $border;
  @include box-shadow($btn-box-shadow);
  @include hover {
    color: color-yiq($hover-background);
    @include gradient-bg($hover-background);
    border-color: $hover-border;
  }

  &.focus,
  &:focus {
    // Avoid using mixin so we can pass custom focus shadow properly
    @if $enable-shadows {
      box-shadow: $btn-box-shadow, 0 0 0 $btn-focus-width rgba($border, .5);
    } @else {
      box-shadow: 0 0 0 $btn-focus-width rgba($border, .5);
    }
  }
  // Disabled comes first so active can properly restyle
  &.disabled,
  &:disabled {
    color: white;
    // color-yiq($background);
    background-color: $disabled;
    //  $background;
    border-color: $disabled;
    //$border;
  }

  &:not(:disabled):not(.disabled).active,
  &:not(:disabled):not(.disabled):active,
  .show > &.dropdown-toggle {
    color: color-yiq($active-background);
    background-color: $active-background;
    @if $enable-gradients {
      background-image: none; // Remove the gradient for the pressed/active state
    }
    border-color: $active-border;

    &:focus {
      // Avoid using mixin so we can pass custom focus shadow properly
      @if $enable-shadows {
        box-shadow: $btn-active-box-shadow, 0 0 0 $btn-focus-width rgba($border, .5);
      } @else {
        box-shadow: 0 0 0 $btn-focus-width rgba($border, .5);
      }
    }
  }
}
@mixin button-outline-variant($color, $color-hover: lighten($color, 9%), $active-background: lighten($color, 9%), $active-border: lighten($color, 9%)) {
  color: $color;
  background-color: $white;
  background-image: none;
  border-color: $color;

  &:hover {
    color: $white;
    background-color: $active-background;
    border-color: $active-border;
  }

  &.focus,
  &:focus {
    box-shadow: 0 0 0 $btn-focus-width rgba($color, .5);
  }

  &.disabled,
  &:disabled {
    color: $disabled;
    border-color: $disabled;
    background-color: transparent;
  }

  &:not(:disabled):not(.disabled).active,
  &:not(:disabled):not(.disabled):active,
  .show > &.dropdown-toggle {
    color: color-yiq($active-background);
    background-color: $active-background;
    border-color: $active-border;

    &:focus {
      // Avoid using mixin so we can pass custom focus shadow properly
      @if $enable-shadows and $btn-active-box-shadow != none {
        box-shadow: $btn-active-box-shadow, 0 0 0 $btn-focus-width rgba($color, .5);
      } @else {
        box-shadow: 0 0 0 $btn-focus-width rgba($color, .5);
      }
    }
  }
}
@each $color, $value in $theme-colors {
  .btn-#{$color} {
    @include button-variant($value, $value);
  }
}
@each $color, $value in $theme-colors {
  .btn-outline-#{$color} {
    @include button-outline-variant($value);
  }
}

.btn {
  @include font-cta();
  // default mobile bigger buttons
  // 42px height
  height: 42px;
  @include button-size($btn-padding-y-lg, $btn-padding-x-lg, $font-size-lg, $btn-line-height, $btn-border-radius);
  // min-height: $btn-min-height;
  &.loading {
    @include gradient-striped();
    background-size: $progress-height $progress-height;
    animation: progress-bar-stripes $progress-bar-animation-timing;
    opacity: 0.65;
    cursor: progress !important;
    pointer-events: none;
  }

  &.dropdown-toggle {
    &+.dropdown-menu {
      &::after {
        position: absolute;
        top: -8px;
        left: auto;
        right: 24px;
        display: block;
        content: "";
        border-top: 1px solid #bac6d2;
        border-right: 0;
        border-bottom: 0;
        border-left: 1px solid #bac6d2;
        width: 14px;
        height: 14px;
        transform: rotate(45deg);
        background: white;
      }
    }
  }
  // responsive btn size, btn goes small beyond lg viewports
  @include media-breakpoint-between(lg,xxl) {
    // 34px height
    height: 34px;
    @include button-size($btn-padding-y, $btn-padding-x, $font-size-base, 1.5rem, $btn-border-radius);
    //icons
    [class^="gel-icon-"] {
      font-size: 1.125rem !important;
      line-height: 1.25;
    }
  }
}

// responsive sm buttons
.btn-sm {
  // mobile 34px height
  height: 34px;
  @include button-size($btn-padding-y, $btn-padding-x, $font-size-base, 1.25rem, $btn-border-radius);

  @include media-breakpoint-between(lg,xxl) {
    //  desktop 28px height
    height: 28px;
    @include button-size($btn-padding-y-sm, $btn-padding-x-sm, $font-size-base, 1.125rem, $btn-border-radius-sm);
    //icons
    [class^="gel-icon-"] {
      font-size: 1rem !important;
      line-height: 1;
    }
  }
}

.btn-link{
  &:active{
    &:focus{
      box-shadow: none !important;
      text-decoration: underline;
    }
  }
}

.btn-icon {
  background-color: transparent;
  color: $slate-700;
  padding: 0.25rem;
  border-radius: 0;

  &:hover {
    color: $slate-500;
  }
}


// .btn-sm {
//   [class^="gel-icon-"] {
//     font-size: 0.875rem;
//   }
// }
//
// .btn-lg {
//   [class^="gel-icon-"] {
//     font-size: 1.25rem;
//   }
// }

.btn-ctrl {
  border-color: $ctrl-border-color;
  border-radius: $ctrl-border-radius;
  background-color: white;
  color: $body-color;

  &:not(:disabled):not(.disabled).active,
  &:not(:disabled):not(.disabled):active {
    background-image: none;
    @include box-shadow(none);

    &.focus,
    &:focus {
      box-shadow: $ctrl-focus-box-shadow;
    }
  }

  &.focus,
  &:focus {
    background-image: none;
    box-shadow: $ctrl-focus-box-shadow;
  }

  &:hover {
    background-color: $ctrl-hover-bg;
  }

  .btn-sm {
    border-radius: 0.25rem;
  }
}

.segmented-control {
  display: flex;

  label {
    flex: 1 1;
    margin-bottom: 0;
    min-width: 0;

    .btn-ctrl {
      display: block;
      border-radius: 0;
      margin-left: -1px;
      @include text-truncate();
    }

    &:first-child {
      .btn-ctrl {
        margin-left: 0;
        border-top-left-radius: $ctrl-border-radius;
        border-bottom-left-radius: $ctrl-border-radius;
      }
    }

    &:last-child {
      .btn-ctrl {
        border-top-right-radius: $ctrl-border-radius;
        border-bottom-right-radius: $ctrl-border-radius;
      }
    }
  }

  input[type="radio"] {
    position: absolute;
    clip: rect(0,0,0,0);
    pointer-events: none;

    &:focus + .btn-ctrl {
      box-shadow: $ctrl-focus-box-shadow;
    }

    &:checked + .btn-ctrl {
      background-color: $ctrl-active-bg;
    }
  }
}
/* input groups */
.input-group > .input-group-append:last-child > .btn:not(:last-child):not(.dropdown-toggle),
.input-group > .input-group-append:last-child > .input-group-text:not(:last-child),
.input-group > .input-group-append:not(:last-child) > .btn,
.input-group > .input-group-append:not(:last-child) > .input-group-text,
.input-group > .input-group-prepend > .btn,
.input-group > .input-group-prepend > .input-group-text {
  @include border-right-radius($ctrl-border-radius);
}

.input-group > .input-group-append > .btn,
.input-group > .input-group-append > .input-group-text,
.input-group > .input-group-prepend:first-child > .btn:not(:first-child),
.input-group > .input-group-prepend:first-child > .input-group-text:not(:first-child),
.input-group > .input-group-prepend:not(:first-child) > .btn,
.input-group > .input-group-prepend:not(:first-child) > .input-group-text {
  @include border-right-radius($ctrl-border-radius);
}
