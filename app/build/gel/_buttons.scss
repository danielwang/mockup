// Button variants
//
// Easily pump out default styles, as well as :hover, :focus, :active,
// and disabled options for all buttons

@mixin button-variant($background, $border, $hover-background: lighten($background, 9%), $hover-border: lighten($border, 9%), $active-background: darken($background, 9%), $active-border: darken($border, 9%)) {
  color: color-yiq($background);
  @include gradient-bg($background);
  border-color: $border;
  @include box-shadow($btn-box-shadow);

  @include hover {
    color: color-yiq($hover-background);
    @include gradient-bg($hover-background);
    border-color: $hover-border;
  }

  &:focus,
  &.focus {
    // Avoid using mixin so we can pass custom focus shadow properly
    @if $enable-shadows {
      box-shadow: $btn-box-shadow, 0 0 0 $btn-focus-width rgba($border, .5);
    } @else {
      box-shadow: 0 0 0 $btn-focus-width rgba($border, .5);
    }
  }

  // Disabled comes first so active can properly restyle
  &.disabled,
  &:disabled {
    color: white;  // color-yiq($background);
    background-color: $disabled;  //  $background;
    border-color: $disabled;  //$border;
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active,
  .show > &.dropdown-toggle {
    color: color-yiq($active-background);
    background-color: $active-background;
    @if $enable-gradients {
      background-image: none; // Remove the gradient for the pressed/active state
    }
    border-color: $active-border;

    &:focus {
      // Avoid using mixin so we can pass custom focus shadow properly
      @if $enable-shadows {
        box-shadow: $btn-active-box-shadow, 0 0 0 $btn-focus-width rgba($border, .5);
      } @else {
        box-shadow: 0 0 0 $btn-focus-width rgba($border, .5);
      }
    }
  }
}

@mixin button-outline-variant($color, $color-hover: lighten($color, 9%), $active-background: lighten($color, 9%), $active-border: lighten($color, 9%)) {
  color: $color;
  background-color: $white;
  background-image: none;
  border-color: $color;

  &:hover {
    color: $white;
    background-color: $active-background;
    border-color: $active-border;
  }

  &:focus,
  &.focus {
    box-shadow: 0 0 0 $btn-focus-width rgba($color, .5);
  }

  &.disabled,
  &:disabled {
    color: $disabled;
    border-color: $disabled;
    background-color: transparent;
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active,
  .show > &.dropdown-toggle {
    color: color-yiq($active-background);
    background-color: $active-background;
    border-color: $active-border;

    &:focus {
      // Avoid using mixin so we can pass custom focus shadow properly
      @if $enable-shadows and $btn-active-box-shadow != none {
        box-shadow: $btn-active-box-shadow, 0 0 0 $btn-focus-width rgba($color, .5);
      } @else {
        box-shadow: 0 0 0 $btn-focus-width rgba($color, .5);
      }
    }
  }
}


@each $color, $value in $theme-colors {
  .btn-#{$color} {
    @include button-variant($value, $value);
  }
}

@each $color, $value in $theme-colors {
  .btn-outline-#{$color} {
    @include button-outline-variant($value);
  }
}

.btn {
  @include font-cta();
  // min-height: $btn-min-height;
  &.loading {
    @include gradient-striped();
    background-size: $progress-height $progress-height;
    animation: progress-bar-stripes $progress-bar-animation-timing;
    opacity: 0.65;
    cursor: progress !important;
    pointer-events: none;
  }

  &.dropdown-toggle{
    &+.dropdown-menu{
      margin-top: $spacer/4;
      &::after{
        display: none;
      }
    }
  }

  // responsive btn size, btn goes large on sm viewport
//  @include media-breakpoint-between(xs,sm){
//    @include button-size($input-btn-padding-y-lg, $input-btn-padding-x-lg, $font-size-lg, $line-height-lg, $btn-border-radius-lg);
//  }
}

.btn-link{
  &:active{
    &:focus{
      box-shadow: none !important;
      text-decoration: underline;
    }
  }
}

.btn-ctrl {
  border-color: $ctrl-border-color;
  border-radius: 0.5rem;
  background-color: white;
  color: $body-color;

  &:not(:disabled):not(.disabled).active,
  &:not(:disabled):not(.disabled):active {
    background-image: none;
    @include box-shadow(none);

    &.focus,
    &:focus {
      box-shadow: $ctrl-focus-box-shadow;
    }
  }

  &.focus,
  &:focus {
    background-image: none;
    box-shadow: $ctrl-focus-box-shadow;
  }
  &:hover{
    background-color: $ctrl-hover-bg;
  }
  .btn-sm{
    border-radius: .25rem;
  }
}

.segmented-control {
  display: flex;

  label {
    flex: 1 1;
    margin-bottom: 0;
    min-width: 0;
    .btn-ctrl{
      display: block;
      border-radius: 0;
      margin-left: -1px;
      @include text-truncate();
    }
    &:first-child{
      .btn-ctrl{
        margin-left: 0;
        border-top-left-radius: $border-radius;
        border-bottom-left-radius: $border-radius;
      }
    }
    &:last-child{
      .btn-ctrl{
        border-top-right-radius: $border-radius;
        border-bottom-right-radius: $border-radius;
      }
    }

  }

  input[type="radio"]{
    position: absolute;
    clip: rect(0,0,0,0);
    pointer-events: none;

    &:focus + .btn-ctrl{
      box-shadow: $ctrl-focus-box-shadow;
    }

    &:checked + .btn-ctrl{
      background-color: $ctrl-active-bg;
    }
  }

}
/* input groups */

.input-group > .input-group-prepend > .btn,
.input-group > .input-group-prepend > .input-group-text,
.input-group > .input-group-append:not(:last-child) > .btn,
.input-group > .input-group-append:not(:last-child) > .input-group-text,
.input-group > .input-group-append:last-child > .btn:not(:last-child):not(.dropdown-toggle),
.input-group > .input-group-append:last-child > .input-group-text:not(:last-child) {
  @include border-right-radius($border-radius);
}

.input-group > .input-group-append > .btn,
.input-group > .input-group-append > .input-group-text,
.input-group > .input-group-prepend:not(:first-child) > .btn,
.input-group > .input-group-prepend:not(:first-child) > .input-group-text,
.input-group > .input-group-prepend:first-child > .btn:not(:first-child),
.input-group > .input-group-prepend:first-child > .input-group-text:not(:first-child) {
  @include border-right-radius($border-radius);
}
